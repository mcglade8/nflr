---
title: "NFL Projections"
output: html_document
date: '2022-07-20'
---

```{r setup, include=FALSE}
#install.packages("nflfastR")
library(nflfastR)
library(dplyr)
library(tidyverse)
library(TTR)
library(coach)

```



### Starting Here
```{r gather-info}

pbp <- load_pbp(2022)

pass_plays <- as.data.frame(pbp) %>%
  filter(play_type == "pass")

team_names <- pass_plays %>%
  select(posteam) %>%
  distinct()

pass_plays[is.na(pass_plays)] <- 0

run_plays <- as.data.frame(pbp) %>%
  filter(play_type == "run")

run_plays[is.na(run_plays)] <- 0

pass_by_game_summary <- pass_plays %>%
  group_by(game_id, posteam, defteam) %>%
  summarise(pass_yards = sum(yards_gained), air_yards = sum(air_yards), yac = sum(yards_after_catch), late_downs_converted = sum(third_down_converted)+sum(fourth_down_converted), pass_tds = sum(pass_touchdown))

run_by_game_summary <- run_plays %>%
  group_by(game_id, posteam, defteam) %>%
  summarise(rush_yards = sum(yards_gained), run_tds = sum(rush_touchdown))

```


### Passing EMA (offense and defense; not very predictive by itself)
```{r pass-ema-stuff}
ema_period <- 5


### Offensive EMA calculations for team pass yards, air yards, and tds
temp_df <- pass_by_game_summary %>%
  filter(posteam == team_names$posteam[1])

off_pass_yards_ema <- EMA(temp_df$pass_yards, ema_period)
off_pass_yards_ema <- off_pass_yards_ema[-length(off_pass_yards_ema)]

off_pass_tds_ema <- EMA(temp_df$pass_tds, ema_period)
off_pass_tds_ema <- off_pass_tds_ema[-length(off_pass_tds_ema)]

off_pass_ays_ema <- EMA(temp_df$air_yards, ema_period)
off_pass_ays_ema <- off_pass_ays_ema[-length(off_pass_ays_ema)]

temp_df = temp_df[-1,]
temp_df$opy_ema <- off_pass_yards_ema
temp_df$optd_ema <- off_pass_tds_ema
temp_df$opair_ema <- off_pass_ays_ema

team_pass_offense_trends <- temp_df

for(i in 2:length(team_names$posteam)){
  temp_df <- pass_by_game_summary %>%
  filter(posteam == team_names$posteam[i])

off_pass_yards_ema <- EMA(temp_df$pass_yards, ema_period)
off_pass_yards_ema <- off_pass_yards_ema[-length(off_pass_yards_ema)]

off_pass_tds_ema <- EMA(temp_df$pass_tds, ema_period)
off_pass_tds_ema <- off_pass_tds_ema[-length(off_pass_tds_ema)]

off_pass_ays_ema <- EMA(temp_df$air_yards, ema_period)
off_pass_ays_ema <- off_pass_ays_ema[-length(off_pass_ays_ema)]

temp_df = temp_df[-1,]
temp_df$opy_ema <- off_pass_yards_ema
temp_df$optd_ema <- off_pass_tds_ema
temp_df$opair_ema <- off_pass_ays_ema
  
team_pass_offense_trends <- rbind(team_offense_trends, temp_df)

}


### Defensive EMA calculations for team pass yards, air yards, and tds
temp_df <- pass_by_game_summary %>%
  filter(defteam == team_names$posteam[1])

off_pass_yards_ema <- EMA(temp_df$pass_yards, ema_period)
off_pass_yards_ema <- off_pass_yards_ema[-length(off_pass_yards_ema)]

off_pass_tds_ema <- EMA(temp_df$pass_tds, ema_period)
off_pass_tds_ema <- off_pass_tds_ema[-length(off_pass_tds_ema)]

off_pass_ays_ema <- EMA(temp_df$air_yards, ema_period)
off_pass_ays_ema <- off_pass_ays_ema[-length(off_pass_ays_ema)]

temp_df = temp_df[-1,]
temp_df$opy_ema <- off_pass_yards_ema
temp_df$optd_ema <- off_pass_tds_ema
temp_df$opair_ema <- off_pass_ays_ema

team_pass_defense_trends <- temp_df

for(i in 2:length(team_names$posteam)){
  temp_df <- pass_by_game_summary %>%
  filter(defteam == team_names$posteam[i])

off_pass_yards_ema <- EMA(temp_df$pass_yards, ema_period)
off_pass_yards_ema <- off_pass_yards_ema[-length(off_pass_yards_ema)]

off_pass_tds_ema <- EMA(temp_df$pass_tds, ema_period)
off_pass_tds_ema <- off_pass_tds_ema[-length(off_pass_tds_ema)]

off_pass_ays_ema <- EMA(temp_df$air_yards, ema_period)
off_pass_ays_ema <- off_pass_ays_ema[-length(off_pass_ays_ema)]

temp_df = temp_df[-1,]
temp_df$opy_ema <- off_pass_yards_ema
temp_df$optd_ema <- off_pass_tds_ema
temp_df$opair_ema <- off_pass_ays_ema
  
team_pass_defense_trends <- rbind(team_offense_trends, temp_df)

}

team_pass_defense_trends <- team_pass_defense_trends %>%
  rename(dpy_ema = opy_ema, dptd_ema = optd_ema, dpair_ema = opair_ema)

temp_df <- team_pass_defense_trends %>%
  select(game_id, dpy_ema, dptd_ema, dpair_ema)

team_pass_trends <- team_pass_offense_trends %>%
  merge(temp_df, by = "game_id")

team_pass_trends <- na.omit(team_pass_trends)

team_pass_trends <- team_pass_trends[team_pass_trends$posteam.x != team_pass_trends$posteam.y,]

team_pass_trends$qb_dkfps <- team_pass_trends$pass_yards*0.04+team_pass_trends$pass_tds*4

lm_ema_based_qb_points <- lm(qb_dkfps ~ opy_ema + optd_ema+ opair_ema+ dpy_ema+ dptd_ema+dpair_ema, data = team_pass_trends)
summary(lm_ema_based_qb_points)


```


### Working with roster and position data
```{r roster}
rm(roster)
#roster <- fast_scraper_roster(seasons = 2022) # This isn't working right now so making it myself below
pbp <- load_pbp(2022) 

qb_roster <- pbp %>%
  select(posteam, passer_player_id, passer_player_name) %>%
  rename(gsis_id = passer_player_id, full_name =  passer_player_name, team = posteam) %>%
  mutate(position = "QB") %>%
  distinct()
qb_roster <- qb_roster[complete.cases(qb_roster),]

rec_roster <- pbp %>%
  select(posteam, receiver_player_id, receiver_player_name)%>%
  rename(gsis_id = receiver_player_id, full_name =  receiver_player_name, team = posteam) %>%
  mutate(position = "REC") %>%
  distinct()
rec_roster <- rec_roster[complete.cases(rec_roster),]

run_roster <- pbp %>%
  select(posteam, rusher_player_id, rusher_player_name)%>%
  rename(gsis_id = rusher_player_id, full_name =  rusher_player_name, team = posteam) %>%
  mutate(position = "RB") %>%
  distinct()
run_roster <- run_roster[complete.cases(run_roster),]

roster <- rbind(qb_roster, rec_roster, run_roster)

pbp <- pbp %>%
  mutate(
    pass_fps = passing_yards*.04+pass_touchdown*4-interception,
    rush_fps = rushing_yards*.1+rush_touchdown*6-fumble_lost,
    rec_fps = receiving_yards*.1+pass_touchdown*6-fumble_lost
  )

pbp$pass_fps[is.na(pbp$pass_fps)] <- 0
pbp$rush_fps[is.na(pbp$rush_fps)] <- 0
pbp$rec_fps[is.na(pbp$rec_fps)] <- 0

passing_info <- pbp %>%
  filter(!is.na(receiver_id))%>%
  select(passer, passer_id, receiver, receiver_id, epa, pass_fps, rec_fps, defteam)

qb_fps_provided <- passing_info %>%
  group_by(passer_id, passer) %>%
  summarise(mean_epa = mean(epa), mean_pass_fps = mean(pass_fps), attempts = n())

rec_fps_provided <-passing_info %>%
  group_by(receiver_id, receiver) %>%
  summarise(mean_epa = mean(epa), mean_rec_fps = mean(rec_fps), receptions = n())

defense_pass_fps_allowed <-passing_info %>%
  group_by(defteam) %>%
  summarise(mean_pass_epa = mean(epa), mean_pass_fps = mean(pass_fps), mean_rec_fps = mean(rec_fps))

rushing_info <- pbp %>%
  filter(!is.na(rusher_id)) %>%
  select(rusher, rusher_id, epa, rush_fps, defteam)

rush_fps_provided <- rushing_info %>%
  group_by(rusher_id, rusher) %>%
  summarise(mean_epa = mean(epa), mean_rush_fps = mean(rush_fps), rush_attempts = n())

defense_rush_fps_allowed <- rushing_info %>%
  group_by(defteam) %>%
  summarise(mean_rush_epa = mean(epa), mean_rush_fps = mean(rush_fps))

defense_fps_allowed <- defense_pass_fps_allowed%>%
  merge(defense_rush_fps_allowed, by = "defteam")

offense_pace_of_play <- pbp %>%
  filter(!is.na(passer_id)) %>%
  group_by(game_id, posteam) %>%
  summarise(pass_plays = n()) %>%
  group_by(posteam) %>%
  summarise(mean_pass_plays = mean(pass_plays))

rush_pace_of_play <- pbp %>%
  filter(!is.na(rusher_id)) %>%
  group_by(game_id, posteam) %>%
  summarise(rush_plays = n()) %>%
  group_by(posteam) %>%
  summarise(mean_rush_plays = mean(rush_plays))

offense_pace_of_play <- offense_pace_of_play %>%
  merge(rush_pace_of_play, by = "posteam")

defense_pace_of_play <- pbp %>%
  filter(!is.na(passer_id)) %>%
  group_by(game_id, defteam) %>%
  summarise(pass_plays = n()) %>%
  group_by(defteam) %>%
  summarise(mean_pass_plays = mean(pass_plays))

rush_fps_provided <- rush_fps_provided %>%
  rename(gsis_id = rusher_id, rush_mean_epa = mean_epa)
rec_fps_provided <- rec_fps_provided %>%
  rename(gsis_id = receiver_id, rec_mean_epa = mean_epa)
qb_fps_provided <- qb_fps_provided %>%
  rename(gsis_id = passer_id, pass_mean_epa = mean_epa, pass_attempts = attempts)


rush_pace_of_play <- pbp %>%
  filter(!is.na(rusher_id)) %>%
  group_by(game_id, defteam) %>%
  summarise(rush_plays = n()) %>%
  group_by(defteam) %>%
  summarise(mean_rush_plays = mean(rush_plays))

defense_pace_of_play <- defense_pace_of_play %>%
  merge(rush_pace_of_play, by = "defteam")

offense_pace_of_play <- rename(offense_pace_of_play, team = posteam)

player_fps <- roster %>%
  merge(rec_fps_provided, by = "gsis_id", all.x = TRUE) %>%
  merge(rush_fps_provided, by = "gsis_id", all.x = TRUE) %>%
  merge(qb_fps_provided, by = "gsis_id", all.x = TRUE)

player_fps[is.na(player_fps)] <-0

player_fps <- player_fps %>%
  merge(offense_pace_of_play, by = "team") %>%
  mutate(
    passing_prio = pass_attempts / mean_pass_plays,
    receiving_prio = receptions / mean_pass_plays,
    rushing_prio = rush_attempts / mean_rush_plays,
    rel_pass_epa = pass_mean_epa * passing_prio,
    rel_rec_epa = rec_mean_epa * receiving_prio,
    rel_rush_epa = rush_mean_epa * rushing_prio,
    rel_pass_fps = mean_pass_fps * passing_prio,
    rel_rec_fps = mean_rec_fps * receiving_prio,
    rel_rush_fps = mean_rush_fps * rushing_prio,
    pass_fps = mean_pass_fps * pass_attempts,
    rec_fps = mean_rec_fps * receptions,
    rush_fps = mean_rush_fps * rush_attempts
  ) %>%
  distinct()

player_fps <- player_fps %>%
  merge(player_positions, by = "gsis_id") %>%
  rename(position = position.x)
  
qbs <- player_fps %>%
  filter(position == "QB") %>%
  select(-rec_mean_epa, -receptions, -mean_rec_fps, -receiving_prio, -rel_rec_epa, -rel_rec_fps, -rec_fps)

recs <- player_fps %>%
  filter(position == "REC") %>%
  select(-pass_mean_epa, -pass_attempts, -mean_pass_fps, -passing_prio, -rel_pass_epa, -rel_pass_fps, -pass_fps)

rbs <- player_fps %>%
  filter(position == "RB") %>%
  select(-pass_mean_epa, -pass_attempts, -mean_pass_fps, -passing_prio, -rel_pass_epa, -rel_pass_fps, -pass_fps)


lm_passing_fps <- lm(pass_fps ~ passing_prio + rel_pass_epa, data = qbs) ### Adjusted R2 0.9385
lm_qb_rushing <- lm(rush_fps ~ rushing_prio + rel_rush_epa, data = qbs) ### Adjusted R2 0.823
lm_rb_rushing <- lm(rush_fps ~ rushing_prio + rel_rush_epa, data = rbs) ### Adjusted R2 0.9311
lm_rb_receiving <- lm(rec_fps ~ receiving_prio + rel_rec_epa, data = rbs) ### Adjusted R2 0.887
lm_rec_receiving <- lm(rec_fps ~ receiving_prio + rel_rec_epa, data = recs) ### Adjusted R2 0.9352

summary(lm_rec_receiving)

qb_export <- qbs %>%
  select(full_name, team, passing_prio, rel_pass_epa, rushing_prio, rel_rush_epa, pass_attempts) %>%
  mutate(pass_projection = predict(lm_passing_fps), run_projection = predict(lm_qb_rushing), expected_fps = pass_projection + run_projection) %>%
  filter(pass_attempts >= 15) %>%
  select(full_name, team, expected_fps)
rec_export <- recs %>%
  select(full_name, team, receiving_prio, rel_rec_epa, receptions) %>%
  mutate(expected_fps = predict(lm_rec_receiving)) %>%
  filter(receptions >= 5) %>%
  select(full_name, team, expected_fps)
rb_export <- rbs %>%
  select(full_name, team, rushing_prio, rel_rush_epa, receiving_prio, rel_rec_epa, rush_attempts) %>%
  mutate(run_projection = predict(lm_rb_rushing), rec_projection = predict(lm_rb_receiving), expected_fps = run_projection + rec_projection) %>%
    filter(rush_attempts >= 10) %>%
  select(full_name, team, expected_fps)
def_export <- defense_rush_fps_allowed %>%
  merge(defense_pass_fps_allowed, by = "defteam")


write.csv(qb_export, "C:/Users/jorda/OneDrive//qb_export.csv", row.names = FALSE)
write.csv(rb_export, "C:/Users/jorda/OneDrive//rb_export.csv", row.names = FALSE)
write.csv(rec_export, "C:/Users/jorda/OneDrive//rec_export.csv", row.names = FALSE)
write.csv(def_export, "C:/Users/jorda/OneDrive//def_export.csv", row.names = FALSE)


write.csv(offense_pace_of_play, "C:/Users/jorda/OneDrive//offense_pace_of_play.csv", row.names = FALSE)
write.csv(defense_pace_of_play, "C:/Users/jorda/OneDrive//defense_pace_of_play.csv", row.names = FALSE)


```


### SD team
```{r standard-deviations}

run_sd <- run_by_game_summary %>%
  group_by(posteam) %>%
  summarise(sd_fps = sd(rush_yards)*.1+sd(run_tds)*6)

pass_sd <- pass_by_game_summary %>%
  group_by(posteam) %>%
  summarise(sd_fps = sd(pass_yards)*.04+sd(pass_tds)*6)


write.csv(run_sd, "C:/Users/jorda/OneDrive//run_sd.csv", row.names = FALSE)
write.csv(pass_sd, "C:/Users/jorda/OneDrive//pass_sd.csv", row.names = FALSE)

```

### Coach lineup builder
```{r lineup-builder}
### ~~~ Parameters ~~~ ###

set.seed(NULL)              # Seed is NULL so as not to create the same lineups every time
teams_to_stack <- c("GB")  # Use one team at a time to ensure QB is stacked with teammates
stack_sizes <- 3 #3           # Number of players in stack
num_lineups <- 10 #23           # Number of lineups to create #20 ARI; 10 TB, 20 BUF, 10 CLE, 9 BAL
bans <- c("Drew Sample")


### SlateProjections exported from NFL Matchups sheet PP Upside; import upside finder from PlayerProfiler (check cell A1 comment)

SlateProjections <- SlateProjections %>%
  select(player_id, Projected.Points, SD)

### Be sure to have downloaded salaries from DK to the below file location

data <- read_dk("C:/Users/jorda/Downloads/DKSalaries.csv") 

bans <- data %>%
  filter(player %in% bans) %>%
  select(row_id)


### Treating DST and QB data differently so they are addressed correctly for the purpose of stacking

dst_data <- data %>%
  filter(position == "DST")

### If you choose to stack, will set stacked team's and opponent's DSTs to -15 projected fps so they are not included in the lineup; not optimal since team DST could still score well in a blowout but this way the DST is not considered part of the stack with the QB and you are not playing a DST against your stack

if(!is.null(teams_to_stack)){
stacked_dst <- dst_data %>%
 filter(team %in% teams_to_stack | opp_team %in% teams_to_stack) %>%
  mutate(fpts_proj = -1000, SD = 0)

unstacked_dst <- dst_data %>%
  filter(!team %in% teams_to_stack & !opp_team %in% teams_to_stack)%>%
  mutate(fpts_proj = .001*salary + .3*fpts_avg, SD = 2)

dst_data <- rbind(stacked_dst, unstacked_dst)
}else{
    dst_data <-dst_data %>%
      mutate(fpts_proj = .001*salary + .3*fpts_avg, SD = 2)
}

qb_data <- data %>%
  filter(position == "QB") 

qb_data <-qb_data %>%
  merge(SlateProjections, by = "player_id") 

qb_data <-qb_data %>%
  select(-fpts_proj) %>%
  rename(fpts_proj = Projected.Points)

qb_data[is.na(qb_data)] <- 0

if(!is.null(teams_to_stack)){
stacked_qbs <- qb_data %>%
  filter(team %in% teams_to_stack)

### Assigning arbitrarily large fpts_proj and 0 SD to highest projected QB so that starter is in every lineup (i.e. so that if randomness were to set projection below 0 we don't start a backup); opposite for every other QB

stacked_qbs <- stacked_qbs[order(stacked_qbs$fpts_proj),]
stacked_qbs$fpts_proj[length(stacked_qbs$fpts_proj)] = 1000  
stacked_qbs$SD[length(stacked_qbs$SD)] = 0  

non_stacked_qbs <- qb_data %>%
  filter(!team %in% teams_to_stack) %>%
  mutate(fpts_proj = -1000, SD = 0)

qb_data <- rbind(stacked_qbs, non_stacked_qbs)
}

data <- data %>%
  filter(position != "DST" & position != "QB") %>%
  merge(SlateProjections, by = "player_id", all.x = TRUE) %>%
  select(-fpts_proj) %>%
  rename(fpts_proj = Projected.Points)
  
data <- data %>%
  rbind(dst_data) %>%
  rbind(qb_data)

data[is.na(data)] <- 0
data <- data[order(data$row_id),]

model <- model_dk_nfl(data)

n <- nrow(data) 
randomness <- function(x) rnorm(n, mean = data$fpts_proj, sd = data$SD)

rm(results)
results <- optimize_generic(data, model, L = num_lineups, randomness = randomness, stack_sizes = stack_sizes, stack_teams = teams_to_stack, bans = bans$row_id)
write_lineups(results, "C:/Users/jorda/OneDrive//mylineups.csv", site = "draftkings", sport = "nfl")

```


### sim SD Optimal
```{r sim-showdown}
SDOptimal <- SDOptimal %>%
  mutate(proj = as.numeric(Projected.Pts), sd = as.numeric(SD))%>%
  filter(Projected.Pts != "#N/A") %>%
  select(Name, Salary, proj, sd, GPP.Need, FLEX.own, CPT.own)

SDOptimal$FLEX.own <- gsub("%", "", as.character(SDOptimal$FLEX.own))
SDOptimal$CPT.own <- gsub("%", "", as.character(SDOptimal$CPT.own))

ownership <- SDOptimal %>%
  select(Name, FLEX.own, CPT.own) %>%
  rename(flex = FLEX.own, cpt = CPT.own) %>%
  mutate(flex = as.numeric(flex), cpt = as.numeric(cpt))

sim_length = 100000
#rm(team_bats_simulation)
showdown_simulation <- rnorm(sim_length, mean = SDOptimal$proj[1], sd = SDOptimal$sd[1])
for(i in 2:length(SDOptimal$proj)){
temp_vector <- rnorm(sim_length, mean = SDOptimal$proj[i], sd = SDOptimal$sd[i])
showdown_simulation <- cbind(showdown_simulation, temp_vector)
}

name_vector <- SDOptimal$Name
colnames(showdown_simulation) <- name_vector

sim_rank <- t(apply(-showdown_simulation, 1, rank))
sim_rank <- t(sim_rank)

ones_vector <- vector("numeric", length(name_vector))
twos_vector <- vector("numeric", length(name_vector))
threes_vector <- vector("numeric", length(name_vector))
fours_vector <- vector("numeric", length(name_vector))
fives_vector <- vector("numeric", length(name_vector))
sixes_vector <- vector("numeric", length(name_vector))

for(i in 1:length(sim_rank)){
  
if(i %% length(name_vector) == 0){
  if(sim_rank[i] == 1){
    ones_vector[length(name_vector) ] <- ones_vector[ length(name_vector)] + 1
  }
  if(sim_rank[i] == 2){
    twos_vector[length(name_vector) ] <- twos_vector[length(name_vector)] + 1
  }
  if(sim_rank[i] == 3){
    threes_vector[length(name_vector) ] <- threes_vector[length(name_vector)] + 1
  }
    if(sim_rank[i] == 4){
    fours_vector[length(name_vector) ] <- fours_vector[length(name_vector)] + 1
    }
    if(sim_rank[i] == 5){
    fives_vector[length(name_vector) ] <- fives_vector[length(name_vector)] + 1
    }
    if(sim_rank[i] == 6){
    sixes_vector[length(name_vector) ] <- sixes_vector[length(name_vector)] + 1
  }
}
else{
  if(sim_rank[i] == 1){
    ones_vector[i %% length(name_vector) ] <- ones_vector[i %% length(name_vector)] + 1
  }
  if(sim_rank[i] == 2){
    twos_vector[i %% length(name_vector) ] <- twos_vector[i %% length(name_vector)] + 1
  }
  if(sim_rank[i] == 3){
    threes_vector[i %% length(name_vector) ] <- threes_vector[i %% length(name_vector)] + 1
  }
    if(sim_rank[i] ==4){
    fours_vector[i %% length(name_vector) ] <- fours_vector[i %% length(name_vector)] + 1
    }
    if(sim_rank[i] == 5){
    fives_vector[i %% length(name_vector) ] <- fives_vector[i %% length(name_vector)] + 1
    }
    if(sim_rank[i] == 6){
    sixes_vector[i %% length(name_vector) ] <- sixes_vector[i %% length(name_vector)] + 1
  }
}
}
sim_rank <- t(sim_rank)
sr_summary <-  t(data.frame(ones_vector,twos_vector,threes_vector, fours_vector, fives_vector, sixes_vector))
colnames(sr_summary) <- name_vector
sr_summary <- t(sr_summary)
sr_summary <- as.data.frame(sr_summary)
sr_summary <- sr_summary%>%
  mutate(top_scorer = ones_vector/sim_length*100, top_six = (ones_vector+twos_vector+threes_vector+fours_vector+fives_vector+sixes_vector)/(sim_length)*100) %>%
  select(top_scorer, top_six)



### Value sim

SDOptimalValue <- SDOptimal %>%
  mutate(proj=proj/GPP.Need, sd=sd/GPP.Need)

showdown_value_simulation <- rnorm(sim_length, mean = SDOptimalValue$proj[1], sd = SDOptimalValue$sd[1])
for(i in 2:length(SDOptimal$proj)){
temp_vector <- rnorm(sim_length, mean = SDOptimalValue$proj[i], sd = SDOptimalValue$sd[i])
showdown_value_simulation <- cbind(showdown_value_simulation, temp_vector)
}

name_vector <- SDOptimalValue$Name
colnames(showdown_value_simulation) <- name_vector

value_sim_rank <- t(apply(-showdown_value_simulation, 1, rank))
value_sim_rank <- t(value_sim_rank)

ones_vector <- vector("numeric", length(name_vector))
twos_vector <- vector("numeric", length(name_vector))
threes_vector <- vector("numeric", length(name_vector))
fours_vector <- vector("numeric", length(name_vector))
fives_vector <- vector("numeric", length(name_vector))
sixes_vector <- vector("numeric", length(name_vector))

for(i in 1:length(value_sim_rank)){
  
if(i %% length(name_vector) == 0){
  if(value_sim_rank[i] == 1){
    ones_vector[length(name_vector) ] <- ones_vector[ length(name_vector)] + 1
  }
  if(value_sim_rank[i] == 2){
    twos_vector[length(name_vector) ] <- twos_vector[length(name_vector)] + 1
  }
  if(value_sim_rank[i] == 3){
    threes_vector[length(name_vector) ] <- threes_vector[length(name_vector)] + 1
  }
    if(value_sim_rank[i] == 4){
    fours_vector[length(name_vector) ] <- fours_vector[length(name_vector)] + 1
    }
    if(value_sim_rank[i] == 5){
    fives_vector[length(name_vector) ] <- fives_vector[length(name_vector)] + 1
    }
    if(value_sim_rank[i] == 6){
    sixes_vector[length(name_vector) ] <- sixes_vector[length(name_vector)] + 1
  }
}
else{
  if(value_sim_rank[i] == 1){
    ones_vector[i %% length(name_vector) ] <- ones_vector[i %% length(name_vector)] + 1
  }
  if(value_sim_rank[i] == 2){
    twos_vector[i %% length(name_vector) ] <- twos_vector[i %% length(name_vector)] + 1
  }
  if(value_sim_rank[i] == 3){
    threes_vector[i %% length(name_vector) ] <- threes_vector[i %% length(name_vector)] + 1
  }
    if(value_sim_rank[i] ==4){
    fours_vector[i %% length(name_vector) ] <- fours_vector[i %% length(name_vector)] + 1
    }
    if(value_sim_rank[i] == 5){
    fives_vector[i %% length(name_vector) ] <- fives_vector[i %% length(name_vector)] + 1
    }
    if(value_sim_rank[i] == 6){
    sixes_vector[i %% length(name_vector) ] <- sixes_vector[i %% length(name_vector)] + 1
  }
}
}
value_sim_rank <- t(value_sim_rank)
vsr_summary <-  t(data.frame(ones_vector,twos_vector,threes_vector, fours_vector, fives_vector, sixes_vector))
colnames(vsr_summary) <- name_vector
vsr_summary <- t(vsr_summary)
vsr_summary <- as.data.frame(vsr_summary)
vsr_summary <- vsr_summary%>%
  mutate(top_value = ones_vector/sim_length*100, top_six_value = (ones_vector+twos_vector+threes_vector+fours_vector+fives_vector+sixes_vector)/(sim_length)*100) %>%
  select(top_value, top_six_value)

vsr_summary$Name <- rownames(vsr_summary)
sr_summary$Name <- rownames(sr_summary)


sr_summary <- merge(sr_summary, vsr_summary, by = "Name")

sr_summary <- merge(sr_summary, ownership, by = "Name")

sr_summary <- sr_summary %>%
  mutate(
    cpt_leverage_score = top_scorer*(100-cpt)/100,
    flex_leverage_score = top_six*(100-flex)/100,
    cpt_leverage_value = top_value*(100-cpt)/100,
    flex_leverage_value = top_six_value*(100-flex)/100
  )

```
