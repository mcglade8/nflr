### sim SD Optimal
```{r sim-showdown}

SDOptimal <- read.csv("C:/Users/jorda/Downloads/SDOptimal.csv")

SDOptimal <- SDOptimal %>%
  mutate(proj = as.numeric(Projected.Pts), sd = as.numeric(SD))%>%
  filter(Projected.Pts != "#N/A") %>%
  select(Name, TeamAbbrev, Salary, proj, sd, GPP.Need, FLEX.own, CPT.own)

SDOptimal$FLEX.own <- gsub("%", "", as.character(SDOptimal$FLEX.own))
SDOptimal$CPT.own <- gsub("%", "", as.character(SDOptimal$CPT.own))

ownership <- SDOptimal %>%
  select(Name, FLEX.own, CPT.own) %>%
  rename(flex = FLEX.own, cpt = CPT.own) %>%
  mutate(flex = as.numeric(flex), cpt = as.numeric(cpt))

sim_length = 100000
#rm(team_bats_simulation)
showdown_simulation <- rnorm(sim_length, mean = SDOptimal$proj[1], sd = SDOptimal$sd[1])
for(i in 2:length(SDOptimal$proj)){
temp_vector <- rnorm(sim_length, mean = SDOptimal$proj[i], sd = SDOptimal$sd[i])
showdown_simulation <- cbind(showdown_simulation, temp_vector)
}

name_vector <- SDOptimal$Name
colnames(showdown_simulation) <- name_vector

sim_rank <- t(apply(-showdown_simulation, 1, rank))
sim_rank <- t(sim_rank)

ones_vector <- vector("numeric", length(name_vector))
twos_vector <- vector("numeric", length(name_vector))
threes_vector <- vector("numeric", length(name_vector))
fours_vector <- vector("numeric", length(name_vector))
fives_vector <- vector("numeric", length(name_vector))
sixes_vector <- vector("numeric", length(name_vector))

for(i in 1:length(sim_rank)){
  
if(i %% length(name_vector) == 0){
  if(sim_rank[i] == 1){
    ones_vector[length(name_vector) ] <- ones_vector[ length(name_vector)] + 1
  }
  if(sim_rank[i] == 2){
    twos_vector[length(name_vector) ] <- twos_vector[length(name_vector)] + 1
  }
  if(sim_rank[i] == 3){
    threes_vector[length(name_vector) ] <- threes_vector[length(name_vector)] + 1
  }
    if(sim_rank[i] == 4){
    fours_vector[length(name_vector) ] <- fours_vector[length(name_vector)] + 1
    }
    if(sim_rank[i] == 5){
    fives_vector[length(name_vector) ] <- fives_vector[length(name_vector)] + 1
    }
    if(sim_rank[i] == 6){
    sixes_vector[length(name_vector) ] <- sixes_vector[length(name_vector)] + 1
  }
}
else{
  if(sim_rank[i] == 1){
    ones_vector[i %% length(name_vector) ] <- ones_vector[i %% length(name_vector)] + 1
  }
  if(sim_rank[i] == 2){
    twos_vector[i %% length(name_vector) ] <- twos_vector[i %% length(name_vector)] + 1
  }
  if(sim_rank[i] == 3){
    threes_vector[i %% length(name_vector) ] <- threes_vector[i %% length(name_vector)] + 1
  }
    if(sim_rank[i] ==4){
    fours_vector[i %% length(name_vector) ] <- fours_vector[i %% length(name_vector)] + 1
    }
    if(sim_rank[i] == 5){
    fives_vector[i %% length(name_vector) ] <- fives_vector[i %% length(name_vector)] + 1
    }
    if(sim_rank[i] == 6){
    sixes_vector[i %% length(name_vector) ] <- sixes_vector[i %% length(name_vector)] + 1
  }
}
}
sim_rank <- t(sim_rank)
sr_summary <-  t(data.frame(ones_vector,twos_vector,threes_vector, fours_vector, fives_vector, sixes_vector))
colnames(sr_summary) <- name_vector
sr_summary <- t(sr_summary)
sr_summary <- as.data.frame(sr_summary)
sr_summary <- sr_summary%>%
  mutate(top_scorer = ones_vector/sim_length*100, top_six = (ones_vector+twos_vector+threes_vector+fours_vector+fives_vector+sixes_vector)/(sim_length)*100) %>%
  select(top_scorer, top_six)



### Value sim

SDOptimalValue <- SDOptimal %>%
  mutate(proj=proj/GPP.Need, sd=sd/GPP.Need)

showdown_value_simulation <- rnorm(sim_length, mean = SDOptimalValue$proj[1], sd = SDOptimalValue$sd[1])
for(i in 2:length(SDOptimal$proj)){
temp_vector <- rnorm(sim_length, mean = SDOptimalValue$proj[i], sd = SDOptimalValue$sd[i])
showdown_value_simulation <- cbind(showdown_value_simulation, temp_vector)
}

name_vector <- SDOptimalValue$Name
colnames(showdown_value_simulation) <- name_vector

value_sim_rank <- t(apply(-showdown_value_simulation, 1, rank))
value_sim_rank <- t(value_sim_rank)

ones_vector <- vector("numeric", length(name_vector))
twos_vector <- vector("numeric", length(name_vector))
threes_vector <- vector("numeric", length(name_vector))
fours_vector <- vector("numeric", length(name_vector))
fives_vector <- vector("numeric", length(name_vector))
sixes_vector <- vector("numeric", length(name_vector))

for(i in 1:length(value_sim_rank)){
  
if(i %% length(name_vector) == 0){
  if(value_sim_rank[i] == 1){
    ones_vector[length(name_vector) ] <- ones_vector[ length(name_vector)] + 1
  }
  if(value_sim_rank[i] == 2){
    twos_vector[length(name_vector) ] <- twos_vector[length(name_vector)] + 1
  }
  if(value_sim_rank[i] == 3){
    threes_vector[length(name_vector) ] <- threes_vector[length(name_vector)] + 1
  }
    if(value_sim_rank[i] == 4){
    fours_vector[length(name_vector) ] <- fours_vector[length(name_vector)] + 1
    }
    if(value_sim_rank[i] == 5){
    fives_vector[length(name_vector) ] <- fives_vector[length(name_vector)] + 1
    }
    if(value_sim_rank[i] == 6){
    sixes_vector[length(name_vector) ] <- sixes_vector[length(name_vector)] + 1
  }
}
else{
  if(value_sim_rank[i] == 1){
    ones_vector[i %% length(name_vector) ] <- ones_vector[i %% length(name_vector)] + 1
  }
  if(value_sim_rank[i] == 2){
    twos_vector[i %% length(name_vector) ] <- twos_vector[i %% length(name_vector)] + 1
  }
  if(value_sim_rank[i] == 3){
    threes_vector[i %% length(name_vector) ] <- threes_vector[i %% length(name_vector)] + 1
  }
    if(value_sim_rank[i] ==4){
    fours_vector[i %% length(name_vector) ] <- fours_vector[i %% length(name_vector)] + 1
    }
    if(value_sim_rank[i] == 5){
    fives_vector[i %% length(name_vector) ] <- fives_vector[i %% length(name_vector)] + 1
    }
    if(value_sim_rank[i] == 6){
    sixes_vector[i %% length(name_vector) ] <- sixes_vector[i %% length(name_vector)] + 1
  }
}
}
value_sim_rank <- t(value_sim_rank)
vsr_summary <-  t(data.frame(ones_vector,twos_vector,threes_vector, fours_vector, fives_vector, sixes_vector))
colnames(vsr_summary) <- name_vector
vsr_summary <- t(vsr_summary)
vsr_summary <- as.data.frame(vsr_summary)
vsr_summary <- vsr_summary%>%
  mutate(top_value = ones_vector/sim_length*100, top_six_value = (ones_vector+twos_vector+threes_vector+fours_vector+fives_vector+sixes_vector)/(sim_length)*100) %>%
  select(top_value, top_six_value)

vsr_summary$Name <- rownames(vsr_summary)
sr_summary$Name <- rownames(sr_summary)


sr_summary <- merge(sr_summary, vsr_summary, by = "Name")

sr_summary <- merge(sr_summary, ownership, by = "Name")

sr_summary <- sr_summary %>%
  mutate(
    cpt_leverage_score = top_scorer*(100-cpt)/100,
    flex_leverage_score = top_six*(100-flex)/100,
    cpt_leverage_value = top_value*(100-cpt)/100,
    flex_leverage_value = top_six_value*(100-flex)/100
  )

```



### LP Solver Showdown
```{r lp-solver-showdown}

num_lineups <- 100

lineups <- data.frame(nrows = 6)
export_to_dk <- data.frame(nrows = 6)
salaries <- read_dk("C:/Users/jorda/Downloads/DKSalariesNFL.csv") 


for(j in 1:num_lineups){

find_cpt <- as.numeric(rnorm(length(SDOptimal$proj), SDOptimal$proj, SDOptimal$sd))
find_cpt <- which.max(find_cpt)

captain <- SDOptimal$Name[find_cpt]

sd_correlations <- correlation %>%
  filter(full_name == captain)


cpt_pos <- SDOptimal %>%
  filter(Name == captain)
flex <- SDOptimal %>%
  filter(Name != captain) %>%
  rename(full_name = Name)

sd_correlations$TeamAbbrev <- cpt_pos$TeamAbbrev

flex <- merge(flex, determine_position, all.x = TRUE) %>%
  select(-player_id)

flex[is.na(flex)] <- "K/DST"

flex$corr_coef <- case_when(flex$position == "QB" & flex$TeamAbbrev == sd_correlations$TeamAbbrev[1] ~ sd_correlations$qb_cor[1],
                            flex$position == "RB" & flex$TeamAbbrev == sd_correlations$TeamAbbrev[1] ~ sd_correlations$rb_cor[1],
                            flex$position == "REC" & flex$TeamAbbrev == sd_correlations$TeamAbbrev[1] ~ sd_correlations$rec_cor[1],
                            flex$position == "QB" & flex$TeamAbbrev != sd_correlations$TeamAbbrev[1] ~ sd_correlations$opp_qb_cor[1],
                            flex$position == "RB" & flex$TeamAbbrev != sd_correlations$TeamAbbrev[1] ~ sd_correlations$opp_rb_cor[1],
                            flex$position == "REC" & flex$TeamAbbrev != sd_correlations$TeamAbbrev[1] ~ sd_correlations$opp_rec_cor[1],
                            T ~ 0)

flex$proj <- flex$proj + flex$sd * flex$corr_coef / 2

## Set coefficients of the decision variables
objective.in <- rnorm(length(flex$proj), flex$proj, flex$sd)


## Create constraint matrix
matrix_vector <- flex$Salary
n <- length(matrix_vector)
for(i in 1:n){
  matrix_vector[n+i] <- 1
}
const.mat = matrix(matrix_vector, nrow = 2, byrow=TRUE)

## Define constraints
resource_constraint = 50000 - cpt_pos$Salary[1]*1.5
position_constraint = 5


## RHS for the constraints
const.rhs = c(resource_constraint, position_constraint)

## Constraints direction
const.dir = c("<=", "==")

optimum =lp(direction = "max", objective.in, const.mat, const.dir, const.rhs, all.bin = TRUE)

flex$optimal <- optimum$solution

lineup <- filter(flex, optimal == 1) %>%
  rename(Name = full_name)%>%
  select(Name) %>%
  mutate(pos = "FLEX")

cpt_pos <- select(cpt_pos, Name) %>%
  mutate(pos = "CPT")

lineup <- rbind(cpt_pos, lineup) %>%
  select(Name)

if(j > 1){
  lineups <- cbind(lineups, lineup)
} else{
  lineups <- lineup

}

}



lineups <- t(lineups)
export_to_dk <- lineups


for(k in 1:length(export_to_dk)){
rep <- match(lineups[k], salaries$player)
rep <- salaries$player_id[rep]
export_to_dk[k] <- rep
}

columns <- c("CPT", "F1", "F2", "F3", "F4", "F5")
colnames(lineups) <- columns
colnames(export_to_dk) <- columns

ownership <- SDOptimal %>%
  select(Name)

ownership$CPT.Own <- 0
ownership$FLEX.Own <- 0

for(i in 1:length(ownership$Name)){
  ownership$CPT.Own[i] = sum(lineups[,1] == ownership$Name[i])
  ownership$FLEX.Own[i] = sum(lineups == ownership$Name[i])
  
}
ownership$FLEX.Own <- (ownership$FLEX.Own - ownership$CPT.Own)/length(lineups[,1])*100
ownership$CPT.Own <- ownership$CPT.Own/length(lineups[,1])*100

```
